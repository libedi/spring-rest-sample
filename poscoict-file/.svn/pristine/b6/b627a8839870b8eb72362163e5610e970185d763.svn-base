package kr.co.poscoict.file.main.service;

import java.io.FileNotFoundException;
import java.io.IOException;
import java.nio.file.Files;
import java.nio.file.LinkOption;
import java.nio.file.Path;
import java.nio.file.Paths;
import java.time.LocalDateTime;
import java.time.format.DateTimeFormatter;
import java.util.Arrays;
import java.util.List;

import org.apache.commons.io.FilenameUtils;
import org.apache.commons.lang3.RandomStringUtils;
import org.apache.commons.lang3.StringUtils;
import org.apache.tomcat.util.http.fileupload.util.mime.MimeUtility;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.beans.factory.annotation.Value;
import org.springframework.http.HttpEntity;
import org.springframework.http.HttpHeaders;
import org.springframework.http.HttpMethod;
import org.springframework.http.MediaType;
import org.springframework.http.ResponseEntity;
import org.springframework.stereotype.Service;
import org.springframework.transaction.annotation.Transactional;
import org.springframework.web.client.RestTemplate;
import org.springframework.web.multipart.MultipartFile;

import com.drew.imaging.ImageProcessingException;
import com.drew.metadata.MetadataException;

import kr.co.poscoict.file.common.model.img.ImageDef;
import kr.co.poscoict.file.common.model.img.Images;
import kr.co.poscoict.file.common.util.ImageUtil;
import kr.co.poscoict.file.common.util.MessageSourceUtil;
import kr.co.poscoict.file.main.mapper.FileMapper;
import kr.co.poscoict.file.main.model.FileInfo;

/**
 * File Service
 * @author Sangjun, Park
 *
 */
@Service
public class FileService {
	private static final Logger logger = LoggerFactory.getLogger(FileService.class);
	
	@Autowired
	private FileMapper fileMapper;
	
	@Autowired
	private RestTemplate restTemplate;
	
	@Autowired
	private MessageSourceUtil messageSource;
	
	@Autowired
	private ImageUtil imageUtil;
	
	@Value("${upload.path.root}")
	private String rootUploadPath;
	
	@Value("${url.nas}")
	private String extNasUrl;
	
	/**
	 * File 조회
	 * @return
	 */
	public List<FileInfo> getFileList() {
		return this.fileMapper.selectFileList(new FileInfo());
	}
	
	/**
	 * File Upload
	 * @param multipartFiles
	 * @throws IllegalStateException
	 * @throws IOException
	 * @throws InterruptedException
	 * @throws MetadataException 
	 * @throws ImageProcessingException 
	 */
	@Transactional
	public FileInfo upload(MultipartFile multipartFile)
			throws IllegalStateException, IOException, InterruptedException, ImageProcessingException, MetadataException {
		logger.info("**** FILE UPLOAD START ****");
		// 1. 업로드 디렉토리 생성
		Path uploadPath = 
				Paths.get(FilenameUtils.normalizeNoEndSeparator(this.rootUploadPath), LocalDateTime.now().format(DateTimeFormatter.BASIC_ISO_DATE));
		Files.createDirectories(uploadPath);
		if(!Files.isDirectory(uploadPath, LinkOption.NOFOLLOW_LINKS)) {
			throw new FileNotFoundException("Unable to create directory: " + uploadPath.toString());
		}
		FileInfo fileInfo = new FileInfo();
		if(StringUtils.isNotEmpty(multipartFile.getOriginalFilename())) {
			// 2. NAS경로에 파일 업로드
			String sourceFilename = MimeUtility.decodeText(multipartFile.getOriginalFilename());
			String sourceFileExtension = FilenameUtils.getExtension(sourceFilename).toLowerCase();
			String destinationFilename = new StringBuilder()
					.append(LocalDateTime.now().format(DateTimeFormatter.ofPattern("yyyyMMddHHmmssSSS")))
					.append("_")
					.append(RandomStringUtils.randomAlphanumeric(8))
					.append(FilenameUtils.EXTENSION_SEPARATOR_STR)
					.append(sourceFileExtension)
					.toString();
			Path destinationPath = Paths.get(uploadPath.toString(), destinationFilename);
			multipartFile.transferTo(destinationPath.toAbsolutePath().toFile());
			// 3. 이미지 리사이징 처리
			if(Images.isImage(sourceFileExtension)) {
				this.imageUtil.resize(destinationPath, ImageDef.FHD);
			}
			// 3. DB에 업로드 정보 insert
			fileInfo.setUploadPath(uploadPath.toString());
			fileInfo.setUploadFileNm(destinationFilename);
			fileInfo.setOriginalFileNm(sourceFilename);
			this.fileMapper.insertFile(fileInfo);
			logger.debug("FILE INFO : {}", fileInfo.toString());
		}
		logger.info("**** FILE UPLOAD COMPLEATE ****");
		return fileInfo;
	}

	/**
	 * File Download
	 * @param fileInfo
	 * @return
	 */
	public Object download(FileInfo fileInfo) {
		List<FileInfo> fileList = this.fileMapper.selectFileList(fileInfo);
		return fileList.isEmpty() ? this.downloadApi(fileInfo.getFileId()) : fileList.get(0);
	}
	
	/**
	 * File Download API call
	 * @param id
	 * @return
	 */
	public ResponseEntity<byte[]> downloadApi(String id) {
		HttpHeaders headers = new HttpHeaders();
		headers.setAccept(Arrays.asList(MediaType.APPLICATION_OCTET_STREAM));
		HttpEntity<String> entity = new HttpEntity<String>(headers); 
		return this.restTemplate.exchange(extNasUrl + id, HttpMethod.GET, entity, byte[].class);
	}

	/**
	 * File Delete
	 * @param id
	 * @throws IOException 
	 */
	public void delete(String id) throws IOException {
		// 1. 파일 조회
		FileInfo fileInfo = new FileInfo();
		fileInfo.setFileId(id);
		List<FileInfo> file = this.fileMapper.selectFileList(fileInfo);
		if(file == null) {
			throw new FileNotFoundException(this.messageSource.getMessage("msg.file.not-found"));
		}
		// 2. 파일 삭제
		this.fileMapper.deleteFile(id);
		Files.deleteIfExists(Paths.get(file.get(0).getUploadPath(), file.get(0).getUploadFileNm()));
	}
}