package kr.co.poscoict.file.common.util;

import java.awt.image.BufferedImage;
import java.io.IOException;
import java.nio.file.Path;
import java.nio.file.Paths;

import javax.imageio.ImageIO;

import org.apache.commons.io.FilenameUtils;
import org.springframework.util.Assert;

import com.mortennobel.imagescaling.AdvancedResizeOp;
import com.mortennobel.imagescaling.ResampleOp;

import kr.co.poscoict.file.common.model.img.ImageDef;
import kr.co.poscoict.file.common.model.img.ImageInfo;
import kr.co.poscoict.file.common.model.img.ImageShape;

/**
 * Image Util class
 * @author Sangjun, Park
 *
 */
public class ImageUtil {
	public static final int RATIO = 0;
	public static final int SAME = -1;
	
	/**
	 * 이미지 리사이징
	 * <p>원본파일을 리사이징 한다.</p>
	 * <p>리사이징할 해상도는 {@link ImageDef}를 통해 결정한다.</p>
	 * <pre>
	 * Path imagePath = ...
	 * ImageUtil.resize(imagePath, ImageDef.HD);	// HD (1280x720)
	 * ImageUtil.resize(imagePath, ImageDef.FHD);	// Full-HD (1920x1080)
	 * </pre>
	 * @param source
	 * @param imageDef
	 * @throws IOException
	 * @throws InterruptedException
	 */
	public static void resize(Path source, ImageDef imageDef) throws IOException, InterruptedException {
		BufferedImage srcImg = ImageIO.read(source.toFile());
		if(!imageDef.isSmall(srcImg.getWidth(), srcImg.getHeight())) {
			ImageInfo imageInfo = ImageInfoFactory.getImageInfo(imageDef, ImageShape.getImageShape(srcImg.getWidth(), srcImg.getHeight()));
			
			if(imageInfo.getImageShape() == ImageShape.HORIZONTAL) {
				resize(source, imageInfo.getWidth(), RATIO);
			} else {
				resize(source, RATIO, imageInfo.getHeight());
			}
		}
	}
	
	/**
	 * 이미지 리사이징
	 * <p>원본파일을 리사이징 한다.</p>
	 * <p>동일 크기로 만들 경우, {@link ImageUtil#SAME}, 다른쪽에 따른 비율로 변환할 경우, {@link ImageUtil#RATIO} 를 파라미터로 넣어준다.</p>
	 * <pre>
	 * Path imagePath = ...
	 * ImageUtil.resize(imagePath, 1920, 1080);
	 * ImageUtil.resize(imagePath, ImageUtil.SAME, 1080);
	 * ImageUtil.resize(imagePath, 1920, ImageUtil.RATIO);
	 * </pre>
	 * @param source : 변환할 원본파일
	 * @param width : 리사이징 할 이미지 너비
	 * @param height : 리사이징 할 이미지 높이
	 * @throws IOException 
	 * @throws InterruptedException 
	 */
	public static void resize(Path source, int width, int height) throws IOException, InterruptedException {
		resize(source, null, width, height);
	}
	
	/**
	 * 이미지 리사이징
	 * <p>원본파일을 리사이징 하여 원하는 위치에 해당 이미지 파일을 생성한다.</p>
	 * <p>동일 크기로 만들 경우, {@link ImageUtil#SAME}, 다른쪽에 따른 비율로 변환할 경우, {@link ImageUtil#RATIO} 를 파라미터로 넣어준다.</p>
	 * <pre>
	 * Path imagePath = ...
	 * Path targetPath = ...
	 * ImageUtil.resize(imagePath, targetPath, 1920, 1080);
	 * ImageUtil.resize(imagePath, targetPath, ImageUtil.SAME, 1080);
	 * ImageUtil.resize(imagePath, targetPath, 1920, ImageUtil.RATIO);
	 * </pre>
	 * @param source : 변환할 원본파일
	 * @param target : 변환된 파일위치
	 * @param width : 리사이징 할 이미지 너비
	 * @param height : 리사이징 할 이미지 높이
	 * @throws IOException 
	 * @throws InterruptedException 
	 */
	public static void resize(Path source, Path target, int width, int height) throws IOException, InterruptedException {
		Assert.notNull(source, "Image file must not be null.");
		if(target == null) {
			target = Paths.get(source.toAbsolutePath().toString());
		}
		BufferedImage srcImg = ImageIO.read(source.toFile());
		
		int srcWidth = srcImg.getWidth(null);
		int srcHeight = srcImg.getHeight(null);
		
		int destWidth = -1;
		int destHeight = -1;
		
		if(width == SAME) {
			destWidth = srcWidth;
		} else if(width > 0) {
			destWidth = width;
		}
		
		if(height == SAME) {
			destHeight = srcHeight;
		} else if(height > 0) {
			destHeight = height;
		}
		
		if(width == RATIO && height == RATIO) {
			destWidth = srcWidth;
			destHeight = srcHeight;
		} else if(width == RATIO) {
			double ratio = ((double) destHeight) / ((double) srcHeight);
			destWidth = (int) ((double) srcWidth * ratio);
		} else if(height == RATIO) {
			double ratio = ((double) destWidth) / ((double) srcWidth);
			destHeight = (int) ((double) srcHeight * ratio);
		}
		
		ResampleOp resampleOp = new ResampleOp(destWidth, destHeight);
		resampleOp.setUnsharpenMask(AdvancedResizeOp.UnsharpenMask.Soft);
		BufferedImage rescaleImage = resampleOp.filter(srcImg, null);
		ImageIO.write(rescaleImage, FilenameUtils.getExtension(source.toString()), target.toFile());
	}
}
