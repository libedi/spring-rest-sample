package kr.co.poscoict.file.framework.config;

import java.util.Arrays;
import java.util.stream.Collectors;

import org.aspectj.lang.JoinPoint;
import org.aspectj.lang.annotation.AfterReturning;
import org.aspectj.lang.annotation.Aspect;
import org.aspectj.lang.annotation.Before;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.stereotype.Component;

/**
 * AOP Logging Configuration
 * @author Sangjun, Park
 *
 */
@Component
@Aspect
public class LoggerAspect {
	private final Logger logger = LoggerFactory.getLogger(LoggerAspect.class);
	
	@Before("execution(* kr.co.poscoict..*Controller.*(..))"
			+ " or execution(* kr.co.poscoict..*Service.*(..))"
			+ " or execution(* kr.co.poscoict..*Mapper.*(..))")
	public void beforeLogging(JoinPoint joinPoint) {
		logger.debug("Before: {}", joinPoint);
		if(joinPoint.getArgs() != null && joinPoint.getArgs().length > 0) {
			logger.debug("Argument: {}", Arrays.asList(joinPoint.getArgs()).stream().map(Object::toString).collect(Collectors.joining(",")));
		}
	}
	
	@AfterReturning(pointcut = "execution(* kr.co.poscoict..*Controller.*(..))"
			+ " or execution(* kr.co.poscoict..*Service.*(..))"
			+ " or execution(* kr.co.poscoict..*Mapper.*(..))", returning = "result")
	public void returnLogging(JoinPoint joinPoint, Object result) {
		logger.debug("Completed: {}", joinPoint);
		if(result != null) {
			logger.debug("Result: {}", result.toString());
		}
	}
}