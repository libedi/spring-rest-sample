<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">

<mapper namespace="kr.co.poscoict.card.detail.mapper.DetailMapper">

	<select id="selectDeptList" parameterType="kr.co.poscoict.card.common.model.Search" resultType="kr.co.poscoict.card.detail.model.Dept">
		/* DetailMapper.selectDeptList 부서정보 조회 */
		WITH CC_RANK AS (
			SELECT
				SEGMENT2
			FROM (
					SELECT
						USER_ID
						, SEGMENT2
						, RANK() OVER(PARTITION BY USER_ID ORDER BY CNT DESC) AS RANK
						, CNT
					FROM (
							SELECT
								BUH.USER_ID
								, BUH.SEGMENT2
								, COUNT(BUH.USER_ID)   AS CNT
							FROM BXAP_UX_HISTROY    BUH
							WHERE BUH.SEGMENT2 IS NOT NULL
							GROUP BY BUH.USER_ID
	                                , BUH.SEGMENT2
							ORDER BY BUH.USER_ID
	                                , CNT DESC
					)
			)
			WHERE RANK <![CDATA[<=]]> (
							SELECT FLV.MEANING
							FROM FND_LOOKUP_VALUES   FLV
							WHERE FLV.LOOKUP_TYPE = 'BXAP_UX_LOOKUP'
								AND FLV.LOOKUP_CODE = 'DISPLAY_CNT'
								AND FLV.ENABLED_FLAG = 'Y')
		),
	    FLEX_VALUE AS (
	                    SELECT FFV.FLEX_VALUE         AS CC_CODE
	                         , FFVT.DESCRIPTION       AS CC_DESC
						FROM FND_FLEX_VALUES        FFV
						JOIN FND_FLEX_VALUES_TL     FFVT ON FFV.FLEX_VALUE_ID = FFVT.FLEX_VALUE_ID
						WHERE FFV.FLEX_VALUE_SET_ID = 1014125
							AND FFV.ENABLED_FLAG = 'Y'
							AND NVL(FFV.START_DATE_ACTIVE, SYSDATE) <![CDATA[<=]]> SYSDATE
							AND NVL(FFV.END_DATE_ACTIVE, SYSDATE) >= SYSDATE
							AND FFV.FLEX_VALUE NOT LIKE 'Z%'
							AND FFV.SUMMARY_FLAG = 'N'
						
		)
		SELECT
			*
		FROM (
			SELECT
				CC_CODE AS DEPT_CODE
				, CC_DESC AS DEPT_NM
			FROM (
			        SELECT FV.CC_CODE
			             , FV.CC_DESC
					FROM FLEX_VALUE  FV
					WHERE EXISTS (
			         				SELECT '@'
			         				FROM CC_RANK CC
			         				WHERE CC.SEGMENT2 = FV.CC_CODE
			                      )
			)
			UNION ALL
			SELECT
				CC_CODE AS DEPT_CODE
				, CC_DESC AS DEPT_NM
			FROM (
			        SELECT FV.CC_CODE
			             , FV.CC_DESC
					FROM FLEX_VALUE  FV
					WHERE NOT EXISTS (
										SELECT '@'
										FROM CC_RANK CC
										WHERE CC.SEGMENT2 = FV.CC_CODE
			                          )
			)
		) T
		<where>
			<if test='srchTxt != null and srchTxt != ""'>
			T.DEPT_NM LIKE '%' || #{srchTxt} || '%'
			</if>
		</where>
		ORDER BY T.DEPT_NM
	</select>
	
	<select id="selectApproveList" parameterType="kr.co.poscoict.card.common.model.Search" resultType="kr.co.poscoict.card.detail.model.Approve">
		/* DetailMapper.selectApproveList 승인권자 조회 */
		SELECT
			AAU.EMP_CD 				AS EMPCD
		    , AAU.EMP_ID
		    , AAU.HNAME
		    , SUBSTR(IS_FUNC.CODENM('E102', IP.JIKCKCD), 1, 50)               AS JIKWICD_DISP
		    , SUBSTR(IS_FUNC.DEPTNM(IP.ORG_ID, IP.COMPYCD, IP.DEPTCD), 1, 50) AS DEPTCD_DISP
		    , AAU.USER_ID
		    , AAU.AUTO_APPROVE_AMT
		    , AAU.ATTRIBUTE4		AS SELF_APPROVE_AMT
		 FROM AXAP_APPROVAL_USER    AAU
			, FND_USER              FU
			, IS_PE01               IP
		 WHERE AAU.ENABLED_FLAG = 'Y'
		   	AND AAU.APPROVAL_FLAG = 'Y'
		   	AND AAU.USER_ID = FU.USER_ID
		   	AND FU.EMPLOYEE_ID = IP.HR_PERSON_ID
		   	AND NVL(FU.END_DATE, SYSDATE) >= SYSDATE
		   	AND NVL(IP.RETDAT, TRUNC(SYSDATE)) >= TRUNC(SYSDATE)
		   	AND AAU.EMP_ID <![CDATA[<>]]> #{user.empId}
		   	<if test='srchTxt != null and srchTxt != ""'>
		   	AND (AAU.HNAME LIKE '%' || #{srchTxt} || '%' OR AAU.EMP_CD LIKE '%' || #{srchTxt} || '%')
		   	</if>
		ORDER BY AAU.HNAME
	</select>
	
	<select id="selectAccountList" parameterType="kr.co.poscoict.card.common.model.Search" resultType="kr.co.poscoict.card.detail.model.Account">
		/* DetailMapper.selectAccountList 계정 조회 */
		WITH ACC_INFO AS (
		                  SELECT SEGMENT3
		                       , SEGMENT4
		                    FROM (
		                          SELECT USER_ID
		                               , SEGMENT3
		                               , SEGMENT4
		                               , RANK() OVER(PARTITION BY USER_ID ORDER BY CNT DESC) AS RANK
		                               , CNT
		                            FROM ( 
		                                  SELECT BUH.USER_ID
		                                       , BUH.SEGMENT3
		                                       , BUH.SEGMENT4
		                                       , COUNT(BUH.USER_ID)   AS CNT
		                                    FROM BXAP_UX_HISTROY    BUH
		                                   WHERE BUH.SEGMENT3 IS NOT NULL
		                                     AND BUH.SEGMENT4 IS NOT NULL
		                                     AND BUH.USER_ID = #{user.userId}
		                                     AND BUH.SEGMENT2 = NVL(#{deptCode}, BUH.SEGMENT2)
		                                  GROUP BY BUH.USER_ID
		                                         , BUH.SEGMENT3
		                                         , BUH.SEGMENT4
		                                  ORDER BY BUH.USER_ID
		                                         , CNT DESC
		                                 )
		                         )
		                   WHERE RANK <![CDATA[<=]]> (SELECT FLV.MEANING
		                                    FROM FND_LOOKUP_VALUES   FLV
		                                   WHERE FLV.LOOKUP_TYPE = 'BXAP_UX_LOOKUP'
		                                     AND FLV.LOOKUP_CODE = 'DISPLAY_CNT'
		                                     AND FLV.ENABLED_FLAG = 'Y')
		                  ),
		    FLEX_VALUE AS (
		                    SELECT FFV_MAIN.FLEX_VALUE    AS MAIN_ACC_CODE
		                         , FFV_SUB.FLEX_VALUE     AS SUB_ACC_CODE
		                         , FFVT_MAIN.DESCRIPTION  AS MAIN_ACC_DESC
		                         , FFVT_SUB.DESCRIPTION   AS SUB_ACC_DESC
		                      FROM FND_FLEX_VALUES        FFV_MAIN
		                         , FND_FLEX_VALUES_TL     FFVT_MAIN
		                         , FND_FLEX_VALUES        FFV_SUB
		                         , FND_FLEX_VALUES_TL     FFVT_SUB
		                     WHERE 1=1
		                       AND FFV_MAIN.FLEX_VALUE_ID = FFVT_MAIN.FLEX_VALUE_ID
		                       AND FFV_MAIN.FLEX_VALUE_SET_ID = 1014126
		                       AND FFV_MAIN.ENABLED_FLAG = 'Y'
		                       AND FFV_MAIN.SUMMARY_FLAG = 'N'
		                       AND NVL(FFV_MAIN.ATTRIBUTE38,'N') = 'Y'
		                       AND NVL(FFV_MAIN.START_DATE_ACTIVE,SYSDATE) <![CDATA[<=]]> SYSDATE
		                       AND NVL(FFV_MAIN.END_DATE_ACTIVE,SYSDATE) >= SYSDATE
		                       AND FFV_MAIN.FLEX_VALUE = FFV_SUB.PARENT_FLEX_VALUE_LOW
		                       AND FFV_SUB.FLEX_VALUE_ID = FFVT_SUB.FLEX_VALUE_ID
		                       AND FFV_SUB.FLEX_VALUE_SET_ID = 1014127
		                       AND FFV_SUB.FLEX_VALUE <![CDATA[<>]]> 'T'
		                       AND FFV_SUB.ENABLED_FLAG = 'Y'
		                       AND NVL(FFV_SUB.START_DATE_ACTIVE,SYSDATE) <![CDATA[<=]]> SYSDATE
		                       AND NVL(FFV_SUB.END_DATE_ACTIVE,SYSDATE) >= SYSDATE
		                       AND NOT EXISTS ( SELECT '@'
		                                          FROM FND_FLEX_VALUES   FFV_COST
		                                         WHERE FFV_COST.FLEX_VALUE_SET_ID = 1014125
		                                           AND FFV_COST.ENABLED_FLAG = 'Y'
		                                           AND FFV_COST.SUMMARY_FLAG = 'N'
		                                           AND FFV_COST.FLEX_VALUE = NVL(#{deptCode},'XXX')
		                                           AND SYSDATE <![CDATA[<=]]> NVL(FFV_COST.END_DATE_ACTIVE,SYSDATE+1)
		                                           AND FFV_MAIN.FLEX_VALUE LIKE DECODE(NVL(FFV_COST.ATTRIBUTE3,'99999'),'5','6%','6','52%','-99999')
		                                      )
		                       AND NOT EXISTS ( SELECT '@'
                                           FROM FND_FLEX_VALUES   FFV_COST
                                          WHERE FFV_COST.FLEX_VALUE_SET_ID = 1014125
                                            AND FFV_COST.ENABLED_FLAG = 'Y'
                                            AND FFV_COST.SUMMARY_FLAG = 'N'
                                            AND FFV_COST.FLEX_VALUE = NVL(#{deptCode},'XXX')
                                            AND SYSDATE <![CDATA[<=]]>  NVL(FFV_COST.END_DATE_ACTIVE,SYSDATE+1)
                                            AND FFV_MAIN.FLEX_VALUE LIKE DECODE(NVL(FFV_COST.ATTRIBUTE3,'99999'),'5','522141','-99999')
                                       )
                               AND EXISTS ( SELECT '@'
                                       FROM FND_FLEX_VALUES   FFV_COST
                                      WHERE FFV_COST.FLEX_VALUE_SET_ID = 1014125
                                        AND FFV_COST.ENABLED_FLAG = 'Y'
                                        AND FFV_COST.SUMMARY_FLAG = 'N'
                                        AND FFV_COST.FLEX_VALUE = NVL(#{deptCode},'XXX')
                                        AND SYSDATE <![CDATA[<=]]>  NVL(FFV_COST.END_DATE_ACTIVE,SYSDATE+1)
                                        AND FFV_MAIN.FLEX_VALUE LIKE DECODE(NVL(FFV_COST.ATTRIBUTE3,'99999'),'7','522141',FFV_MAIN.FLEX_VALUE)
                                       )
		                      UNION
		                    SELECT FFV_MAIN.FLEX_VALUE    AS MAIN_ACC_CODE
		                         , FFV_SUB.FLEX_VALUE     AS SUB_ACC_CODE
		                         , FFVT_MAIN.DESCRIPTION  AS MAIN_ACC_DESC
		                         , FFVT_SUB.DESCRIPTION   AS SUB_ACC_DESC
		                      FROM FND_FLEX_VALUES        FFV_MAIN
		                         , FND_FLEX_VALUES_TL     FFVT_MAIN
		                         , FND_FLEX_VALUES        FFV_SUB
		                         , FND_FLEX_VALUES_TL     FFVT_SUB
		                     WHERE 1=1
		                       AND FFV_MAIN.FLEX_VALUE_ID = FFVT_MAIN.FLEX_VALUE_ID
		                       AND FFV_MAIN.FLEX_VALUE_SET_ID = 1014126
		                       AND FFV_MAIN.ENABLED_FLAG = 'Y'
		                       AND FFV_MAIN.SUMMARY_FLAG = 'N'
		                       AND FFV_MAIN.FLEX_VALUE LIKE '52214%'
		                       AND NVL(FFV_MAIN.ATTRIBUTE38,'N') = 'Y'
		                       AND NVL(FFV_MAIN.START_DATE_ACTIVE,SYSDATE) <![CDATA[<=]]> SYSDATE
		                       AND NVL(FFV_MAIN.END_DATE_ACTIVE,SYSDATE) >= SYSDATE
		                       AND FFV_MAIN.FLEX_VALUE = FFV_SUB.PARENT_FLEX_VALUE_LOW
		                       AND FFV_SUB.FLEX_VALUE_ID = FFVT_SUB.FLEX_VALUE_ID
		                       AND FFV_SUB.FLEX_VALUE_SET_ID = 1014127
		                       AND FFV_SUB.FLEX_VALUE <![CDATA[<>]]> 'T'
		                       AND FFV_SUB.ENABLED_FLAG = 'Y'
		                       AND NVL(FFV_SUB.START_DATE_ACTIVE,SYSDATE) <![CDATA[<=]]> SYSDATE
		                       AND NVL(FFV_SUB.END_DATE_ACTIVE,SYSDATE) >= SYSDATE
		                       AND 'Y' = NVL( (SELECT NVL(FFV_COST.ATTRIBUTE4,'N')
		                                         FROM FND_FLEX_VALUES   FFV_COST
		                                        WHERE FFV_COST.FLEX_VALUE_SET_ID = 1014125
		                                          AND FFV_COST.ENABLED_FLAG = 'Y'
		                                          AND FFV_COST.SUMMARY_FLAG = 'N'
		                                          AND FFV_COST.FLEX_VALUE = NVL(#{deptCode},'XXX')
		                                          AND SYSDATE <![CDATA[<=]]> NVL(FFV_COST.END_DATE_ACTIVE,SYSDATE+1)
		                                        ),'N')
		                   )
		SELECT *
		FROM (
			SELECT *
			  FROM (
			        SELECT 'Y'                        AS RECENT_USE
			             , FLV.DESCRIPTION            AS ACC_NAME
			             , SUBSTR(FLV.MEANING,1,1)    AS ACC_GUBUN
			             , FV.MAIN_ACC_CODE
			             , FV.SUB_ACC_CODE
			             , FV.MAIN_ACC_DESC
			             , FV.SUB_ACC_DESC
			             , (SELECT DISTINCT FLV1.ATTRIBUTE1
			                  FROM FND_LOOKUP_VALUES  FLV1
			                 WHERE FLV1.LOOKUP_TYPE = 'BXAP_CARD_ACCOUNT_LIST'
			                   AND FLV1.DESCRIPTION = FLV.DESCRIPTION
			                   AND FLV1.TAG = 'NORMAL'
			                ) AS ATTRIBUTE_CATEGORY
			          FROM FLEX_VALUE          FV
			             , FND_LOOKUP_VALUES   FLV
			         WHERE 1=1
			           AND FV.MAIN_ACC_CODE||FV.SUB_ACC_CODE = FLV.LOOKUP_CODE
			           AND FLV.LOOKUP_TYPE = 'BXAP_CARD_ACCOUNT_LIST'
			           AND FLV.TAG = 'NORMAL'
			           AND FLV.ENABLED_FLAG = 'Y'
			           AND SYSDATE BETWEEN NVL(FLV.START_DATE_ACTIVE,SYSDATE) 
			                           AND NVL(FLV.END_DATE_ACTIVE,SYSDATE)
			           AND EXISTS ( SELECT '@'
			                          FROM ACC_INFO ACC
			                         WHERE ACC.SEGMENT3 = FV.MAIN_ACC_CODE
			                           AND ACC.SEGMENT4 = FV.SUB_ACC_CODE
			                      )
			        )
			UNION ALL
			SELECT *
			  FROM (
			        SELECT 'N'                        AS RECENT_USE
			             , FLV.DESCRIPTION            AS ACC_NAME
			             , SUBSTR(FLV.MEANING,1,1)    AS ACC_GUBUN
			             , FV.MAIN_ACC_CODE
			             , FV.SUB_ACC_CODE
			             , FV.MAIN_ACC_DESC
			             , FV.SUB_ACC_DESC
			             , (SELECT DISTINCT FLV1.ATTRIBUTE1
			                  FROM FND_LOOKUP_VALUES  FLV1
			                 WHERE FLV1.LOOKUP_TYPE = 'BXAP_CARD_ACCOUNT_LIST'
			                   AND FLV1.DESCRIPTION = FLV.DESCRIPTION
			                   AND FLV1.TAG = 'NORMAL'
			                ) AS ATTRIBUTE_CATEGORY
			          FROM FLEX_VALUE          FV
			             , FND_LOOKUP_VALUES   FLV
			         WHERE 1=1
			           AND FV.MAIN_ACC_CODE||FV.SUB_ACC_CODE = FLV.LOOKUP_CODE
			           AND FLV.LOOKUP_TYPE = 'BXAP_CARD_ACCOUNT_LIST'
			           AND FLV.TAG = 'NORMAL'
			           AND FLV.ENABLED_FLAG = 'Y'
			           AND SYSDATE BETWEEN NVL(FLV.START_DATE_ACTIVE,SYSDATE) 
			                           AND NVL(FLV.END_DATE_ACTIVE,SYSDATE)
			           AND NOT EXISTS ( SELECT '@'
			                              FROM ACC_INFO ACC
			                             WHERE ACC.SEGMENT3 = FV.MAIN_ACC_CODE
			                               AND ACC.SEGMENT4 = FV.SUB_ACC_CODE
			                          )
			      ORDER BY FV.MAIN_ACC_CODE
			             , FV.SUB_ACC_CODE
			        )
		) T
		<where>
			<if test='srchTxt != null and srchTxt != ""'>
			T.ACC_NAME LIKE '%' || #{srchTxt} || '%'
			</if>
		</where>
	</select>
	
	<select id="selectProjectList" parameterType="kr.co.poscoict.card.common.model.Search" resultType="kr.co.poscoict.card.detail.model.Project">
		/* DetailMapper.selectProjectList 프로젝트 리스트 조회 */
		WITH PJT_RANK AS (
	                  SELECT PROJECT_ID
	                    FROM (
	                          SELECT USER_ID
	                               , PROJECT_ID
	                               , RANK() OVER(PARTITION BY USER_ID ORDER BY CNT DESC) AS RANK
	                               , CNT
	                            FROM ( 
	                                  SELECT BUH.USER_ID
	                                       , BUH.PROJECT_ID
	                                       , COUNT(BUH.USER_ID)   AS CNT
	                                    FROM BXAP_UX_HISTROY    BUH
	                                   WHERE BUH.PROJECT_ID IS NOT NULL
	                                     AND BUH.USER_ID = #{user.userId}
	                                  GROUP BY BUH.USER_ID
	                                         , BUH.PROJECT_ID
	                                  ORDER BY BUH.USER_ID
	                                         , CNT DESC
	                                 )
	                         )
	                   WHERE RANK <![CDATA[<=]]> (SELECT FLV.MEANING
	                                    FROM FND_LOOKUP_VALUES   FLV
	                                   WHERE FLV.LOOKUP_TYPE = 'BXAP_UX_LOOKUP'
	                                     AND FLV.LOOKUP_CODE = 'DISPLAY_CNT'
	                                     AND FLV.ENABLED_FLAG = 'Y')
	                  ),
	    FLEX_VALUE AS (
	                    SELECT PPA.NAME          AS PROJECT_NAME
	                         , PPA.SEGMENT1      AS PROJECT_NUMBER
	                         , PPA.PROJECT_ID    AS PROJECT_ID
	                         , PPA.PROJECT_TYPE  AS PROJECT_TYPE
	                         , PPA.PROJECT_STATUS_CODE
	                      FROM PA_PROJECTS_ALL PPA
	                     WHERE 1=1
	                       AND NVL(PPA.ENABLED_FLAG, 'N') = 'Y'
	                       AND PPA.PROJECT_STATUS_CODE IN ('1000', 'UNAPPROVED', 'APPROVED')
	                       AND PPA.TEMPLATE_FLAG <![CDATA[<>]]> 'Y'
	                       AND PPA.SEGMENT1 NOT LIKE '000000%'
	                   )
		SELECT *
		FROM (
			SELECT *
			FROM (
			        SELECT FV.PROJECT_NAME
			             , FV.PROJECT_NUMBER
			             , FV.PROJECT_TYPE
			             , FV.PROJECT_STATUS_CODE
			             , FV.PROJECT_ID
			          FROM FLEX_VALUE  FV
			         WHERE EXISTS ( SELECT '@'
			                          FROM PJT_RANK  PR
			                         WHERE PR.PROJECT_ID = FV.PROJECT_ID
			                      )
			       )
			UNION ALL
			SELECT *
			FROM (
			        SELECT FV.PROJECT_NAME
			             , FV.PROJECT_NUMBER
			             , FV.PROJECT_TYPE
			             , FV.PROJECT_STATUS_CODE
			             , FV.PROJECT_ID
			          FROM FLEX_VALUE  FV
			         WHERE NOT EXISTS ( SELECT '@'
			                              FROM PJT_RANK  PR
			                             WHERE PR.PROJECT_ID = FV.PROJECT_ID
			                          )
			      ORDER BY FV.PROJECT_NUMBER
			  )
		) T
		<where>
			<if test='srchTxt != null and srchTxt != ""'>
			T.PROJECT_NAME LIKE '%' || #{srchTxt} || '%'
			OR T.PROJECT_NUMBER LIKE '%' || UPPER(#{srchTxt}) || '%' 
			</if>
		</where>
	</select>
	
	<select id="selectTaskList" parameterType="kr.co.poscoict.card.detail.model.DetailSearch" resultType="kr.co.poscoict.card.detail.model.Task">
		/* DetailMapper.selectTaskList Task 조회 */
		WITH TASK_RANK AS (
		                  SELECT PROJECT_ID
		                       , TASK_ID
		                    FROM (
		                          SELECT USER_ID
		                               , PROJECT_ID
		                               , TASK_ID
		                               , RANK() OVER(PARTITION BY USER_ID ORDER BY CNT DESC) AS RANK
		                               , CNT
		                            FROM ( 
		                                  SELECT BUH.USER_ID
		                                       , BUH.PROJECT_ID
		                                       , BUH.TASK_ID
		                                       , COUNT(BUH.USER_ID)   AS CNT
		                                    FROM BXAP_UX_HISTROY    BUH
		                                   WHERE BUH.PROJECT_ID IS NOT NULL
		                                     AND BUH.TASK_ID IS NOT NULL
		                                     AND BUH.USER_ID = #{user.userId}
		                                     AND BUH.PROJECT_ID = #{projectId}
		                                  GROUP BY BUH.USER_ID
		                                         , BUH.PROJECT_ID
		                                         , BUH.TASK_ID
		                                  ORDER BY BUH.USER_ID
		                                         , CNT DESC
		                                 )
		                         )
		                   WHERE RANK <![CDATA[<=]]> (SELECT FLV.MEANING
		                                    FROM FND_LOOKUP_VALUES   FLV
		                                   WHERE FLV.LOOKUP_TYPE = 'BXAP_UX_LOOKUP'
		                                     AND FLV.LOOKUP_CODE = 'DISPLAY_CNT'
		                                     AND FLV.ENABLED_FLAG = 'Y')
		                  ),
		    FLEX_VALUE AS (
		                    SELECT PT.TASK_NAME
		                         , PT.TASK_NUMBER
		                         , PT.TASK_ID
		                         , PT.PROJECT_ID
		                      FROM PA_TASKS PT
		                     WHERE PT.PROJECT_ID = #{projectId}
		                       AND PT.CHARGEABLE_FLAG = 'Y'
		                       AND PT.TASK_NAME <![CDATA[<>]]> '원가'
		                   )
		SELECT *
		FROM (
			SELECT *
			  FROM (
			        SELECT FV.TASK_NAME
			             , FV.TASK_NUMBER
			             , FV.TASK_ID
			          FROM FLEX_VALUE  FV
			         WHERE EXISTS ( SELECT '@'
			                          FROM TASK_RANK  TR
			                         WHERE TR.PROJECT_ID = FV.PROJECT_ID
			                           AND TR.TASK_ID = FV.TASK_ID
			                      )
			       )
			UNION ALL
			SELECT *
			  FROM (
			        SELECT FV.TASK_NAME
			             , FV.TASK_NUMBER
			             , FV.TASK_ID
			          FROM FLEX_VALUE  FV
			         WHERE NOT EXISTS ( SELECT '@'
			                              FROM TASK_RANK  TR
			                             WHERE TR.PROJECT_ID = FV.PROJECT_ID
			                               AND TR.TASK_ID = FV.TASK_ID
			                           )
			      ORDER BY FV.TASK_NUMBER
			       )
		) T
		<where>
			<if test='srchTxt != null and srchTxt != ""'>
			T.TASK_NAME LIKE '%' || #{srchTxt} || '%'
			OR T.TASK_NUMBER LIKE '%' || #{srchTxt} || '%' 
			</if>
		</where>
	</select>
	
	<select id="selectOrgList" parameterType="kr.co.poscoict.card.detail.model.DetailSearch" resultType="kr.co.poscoict.card.detail.model.Org">
		/* DetailMapper.selectOrgList 수행조직 조회 */
		WITH EXP_ORG_RANK AS (
		                        SELECT EXP_ORGID
		                          FROM (
		                                SELECT USER_ID
		                                     , PROJECT_ID
		                                     , EXP_ORGID
		                                     , RANK() OVER(PARTITION BY USER_ID ORDER BY CNT DESC) AS RANK
		                                     , CNT
		                                  FROM ( 
		                                        SELECT BUH.USER_ID
		                                             , BUH.PROJECT_ID
		                                             , BUH.EXP_ORGID
		                                             , COUNT(BUH.USER_ID)   AS CNT
		                                          FROM BXAP_UX_HISTROY    BUH
		                                         WHERE BUH.PROJECT_ID IS NOT NULL
		                                           AND BUH.EXP_ORGID IS NOT NULL
		                                           AND BUH.USER_ID = #{user.userId}
		                                           AND BUH.PROJECT_ID = #{projectId}
		                                        GROUP BY BUH.USER_ID
		                                               , BUH.PROJECT_ID
		                                               , BUH.EXP_ORGID
		                                        ORDER BY BUH.USER_ID
		                                               , CNT DESC
		                                       )
		                               )
		                         WHERE RANK <![CDATA[<=]]> (SELECT FLV.MEANING
		                                    FROM FND_LOOKUP_VALUES   FLV
		                                   WHERE FLV.LOOKUP_TYPE = 'BXAP_UX_LOOKUP'
		                                     AND FLV.LOOKUP_CODE = 'DISPLAY_CNT'
		                                     AND FLV.ENABLED_FLAG = 'Y')
		                  ),
		    FLEX_VALUE AS (
		                    SELECT ORG.NAME                   AS EXP_ORG_NAME
		                         , ORG.ORGANIZATION_ID        AS EXP_ORG_ID
		                         , ( SELECT PCAK.SEGMENT2
		                              FROM PAY_COST_ALLOCATION_KEYFLEX  PCAK
		                             WHERE ORG.COST_ALLOCATION_KEYFLEX_ID = PCAK.COST_ALLOCATION_KEYFLEX_ID
		                           )                          AS SEGMENT2
		                      FROM HR_ORGANIZATION_UNITS      ORG
		                         , PA_IMPLEMENTATIONS_ALL     IMP
		                     WHERE ORG.BUSINESS_GROUP_ID = IMP.BUSINESS_GROUP_ID
		                       AND SYSDATE BETWEEN NVL(ORG.DATE_FROM, SYSDATE - 1)
		                                       AND NVL(ORG.DATE_TO, SYSDATE + 1)
		                       AND EXISTS (SELECT 'X'
		                                    FROM HR_ORGANIZATION_INFORMATION INFO
		                                   WHERE INFO.ORGANIZATION_ID = ORG.ORGANIZATION_ID
		                                     AND INFO.ORG_INFORMATION1 = 'PA_EXPENDITURE_ORG'
		                                     AND INFO.ORG_INFORMATION_CONTEXT || '' = 'CLASS'
		                                     AND INFO.ORG_INFORMATION2 = 'Y')
		                       AND ORG.ORGANIZATION_ID IN ( SELECT SE.ORGANIZATION_ID_CHILD
		                                                      FROM PER_ORG_STRUCTURE_ELEMENTS SE
		                                                     WHERE SE.ORG_STRUCTURE_VERSION_ID = IMP.EXP_ORG_STRUCTURE_VERSION_ID
		                                                START WITH SE.ORGANIZATION_ID_PARENT = IMP.EXP_START_ORG_ID
		                                                CONNECT BY PRIOR SE.ORGANIZATION_ID_CHILD = SE.ORGANIZATION_ID_PARENT
		                                                     UNION
		                                                    SELECT IMP.EXP_START_ORG_ID FROM SYS.DUAL
		                                                  )
		                       AND EXISTS ( SELECT '@'
		                                      FROM PAY_COST_ALLOCATION_KEYFLEX  PCAK
		                                     WHERE ORG.COST_ALLOCATION_KEYFLEX_ID = PCAK.COST_ALLOCATION_KEYFLEX_ID
		                                   )
		                    ORDER BY EXP_ORG_NAME
		                   )
		SELECT *
		FROM (
			SELECT *
			  FROM (
			        SELECT FV.EXP_ORG_NAME
			             , FV.EXP_ORG_ID
			             , FV.SEGMENT2
			          FROM FLEX_VALUE  FV
			         WHERE EXISTS ( SELECT '@'
			                          FROM EXP_ORG_RANK  ETR
			                         WHERE ETR.EXP_ORGID = FV.EXP_ORG_ID
			                      )
			       )
			UNION ALL
			SELECT *
			  FROM (
			        SELECT FV.EXP_ORG_NAME
			             , FV.EXP_ORG_ID
			             , FV.SEGMENT2
			          FROM FLEX_VALUE  FV
			         WHERE NOT EXISTS ( SELECT '@'
			                              FROM EXP_ORG_RANK  ETR
			                             WHERE ETR.EXP_ORGID = FV.EXP_ORG_ID
			                          )
			           AND EXISTS ( SELECT '@'
			                          FROM PA_TASKS   PTS
			                         WHERE PTS.PROJECT_ID = #{projectId}
			                           AND PTS.CARRYING_OUT_ORGANIZATION_ID = FV.EXP_ORG_ID
			                      )
			      ORDER BY FV.EXP_ORG_NAME
			       )
			UNION ALL
			SELECT *
			  FROM (
			        SELECT FV.EXP_ORG_NAME
			             , FV.EXP_ORG_ID
			             , FV.SEGMENT2
			          FROM FLEX_VALUE  FV
			         WHERE NOT EXISTS ( SELECT '@'
			                              FROM EXP_ORG_RANK  ETR
			                             WHERE ETR.EXP_ORGID = FV.EXP_ORG_ID
			                          )
			           AND NOT EXISTS ( SELECT '@'
			                              FROM PA_TASKS   PTS
			                             WHERE PTS.PROJECT_ID = #{projectId}
			                               AND PTS.CARRYING_OUT_ORGANIZATION_ID = FV.EXP_ORG_ID
                                 )
			      ORDER BY FV.EXP_ORG_NAME
			       )
		) T
		<where>
			<if test='srchTxt != null and srchTxt != ""'>
			T.EXP_ORG_NAME LIKE '%' || #{srchTxt} || '%'
			</if>
		</where>
	</select>
	
	<select id="selectTypeList" parameterType="kr.co.poscoict.card.detail.model.DetailSearch" resultType="kr.co.poscoict.card.detail.model.Type">
		/* DetailMapper.selectTypeList 원가유형 조회 */
		WITH EXP_TYPE_RANK AS (
		                    SELECT EXP_TYPE
		                      FROM (
		                            SELECT USER_ID
		                                 , PROJECT_ID
		                                 , EXP_TYPE
		                                 , RANK() OVER(PARTITION BY USER_ID ORDER BY CNT DESC) AS RANK
		                                 , CNT
		                              FROM ( 
		                                    SELECT BUH.USER_ID
		                                         , BUH.PROJECT_ID
		                                         , BUH.EXP_TYPE
		                                         , COUNT(BUH.USER_ID)   AS CNT
		                                      FROM BXAP_UX_HISTROY    BUH
		                                     WHERE BUH.PROJECT_ID IS NOT NULL
		                                       AND BUH.EXP_TYPE IS NOT NULL
		                                       AND BUH.USER_ID = #{user.userId}
		                                       AND BUH.PROJECT_ID = #{projectId}
		                                    GROUP BY BUH.USER_ID
		                                           , BUH.PROJECT_ID
		                                           , BUH.EXP_TYPE
		                                    ORDER BY BUH.USER_ID
		                                           , CNT DESC
		                                   )
		                           )
		                     WHERE RANK <![CDATA[<=]]> (SELECT FLV.MEANING
		                                    FROM FND_LOOKUP_VALUES   FLV
		                                   WHERE FLV.LOOKUP_TYPE = 'BXAP_UX_LOOKUP'
		                                     AND FLV.LOOKUP_CODE = 'DISPLAY_CNT'
		                                     AND FLV.ENABLED_FLAG = 'Y')
		                  ),
		    FLEX_VALUE AS (
		                    SELECT AETLV.EXPENDITURE_TYPE   AS EXP_TYPE
		                         , AETLV.SEGMENT3           AS MAIN_ACC_CODE
		                         , AETLV.SEGMENT4           AS SUB_ACC_CODE
		                      FROM AXGL_EXP_TYPE_LOV_V  AETLV
		                     WHERE AETLV.PROJECT_TYPE = NVL(AXAP_COMMON_PKG.GET_PROJECT_TYPE(#{projectNumber}),'XXX')   
		                       AND DECODE(AETLV.PROJECT_TYPE,<![CDATA['R&D']]>,AETLV.PROJECT_SUB_TYPE,'XXXX') 
		                         = DECODE(AETLV.PROJECT_TYPE,<![CDATA['R&D']]>,SUBSTR(NVL(#{projectNumber},'XXX'),3,1),'XXXX')
		                   )
		SELECT *
		FROM (
			SELECT *
			  FROM (
			        SELECT FLV.DESCRIPTION            AS EXP_TYPE
			             , FV.MAIN_ACC_CODE
			             , FV.SUB_ACC_CODE
			             , (SELECT DISTINCT FLV1.ATTRIBUTE1
			                  FROM FND_LOOKUP_VALUES  FLV1
			                 WHERE FLV1.LOOKUP_TYPE = 'BXAP_CARD_ACCOUNT_LIST'
			                   AND FLV1.DESCRIPTION = FLV.DESCRIPTION
			                   AND FLV1.TAG = 'PROJECT'
			                ) AS ATTRIBUTE_CATEGORY
			          FROM FLEX_VALUE  FV
			             , FND_LOOKUP_VALUES   FLV
			         WHERE 1=1
			           AND FV.EXP_TYPE = FLV.LOOKUP_CODE
			           AND FLV.LOOKUP_TYPE = 'BXAP_CARD_ACCOUNT_LIST'
			           AND FLV.TAG = 'PROJECT'
			           AND FLV.ENABLED_FLAG = 'Y'
			           AND SYSDATE BETWEEN NVL(FLV.START_DATE_ACTIVE,SYSDATE) 
			                           AND NVL(FLV.END_DATE_ACTIVE,SYSDATE)
			           AND EXISTS ( SELECT '@'
			                          FROM EXP_TYPE_RANK  ETR
			                         WHERE ETR.EXP_TYPE = FV.EXP_TYPE
			                      )
			  )
			UNION ALL
			SELECT *
			  FROM (
			        SELECT FLV.DESCRIPTION            AS EXP_TYPE
			             , FV.MAIN_ACC_CODE
			             , FV.SUB_ACC_CODE
			             , (SELECT DISTINCT FLV1.ATTRIBUTE1
			                  FROM FND_LOOKUP_VALUES  FLV1
			                 WHERE FLV1.LOOKUP_TYPE = 'BXAP_CARD_ACCOUNT_LIST'
			                   AND FLV1.DESCRIPTION = FLV.DESCRIPTION
			                   AND FLV1.TAG = 'PROJECT'
			                ) AS ATTRIBUTE_CATEGORY
			          FROM FLEX_VALUE  FV
			             , FND_LOOKUP_VALUES   FLV
			         WHERE 1=1
			           AND FV.EXP_TYPE = FLV.LOOKUP_CODE
			           AND FLV.LOOKUP_TYPE = 'BXAP_CARD_ACCOUNT_LIST'
			           AND FLV.TAG = 'PROJECT'
			           AND FLV.ENABLED_FLAG = 'Y'
			           AND SYSDATE BETWEEN NVL(FLV.START_DATE_ACTIVE,SYSDATE) 
			                           AND NVL(FLV.END_DATE_ACTIVE,SYSDATE)
			           AND NOT EXISTS ( SELECT '@'
			                              FROM EXP_TYPE_RANK  ETR
			                             WHERE ETR.EXP_TYPE = FV.EXP_TYPE
			                           )
			      ORDER BY FV.EXP_TYPE
			  )
		) T
		<where>
			<if test='srchTxt != null and srchTxt != ""'>
			T.EXP_TYPE LIKE '%' || #{srchTxt} || '%'
			OR T.SUB_ACC_CODE LIKE '%' || #{srchTxt} || '%' 
			</if>
		</where>
	</select>
	
	<select id="selectVendorInfo" parameterType="string" resultType="kr.co.poscoict.card.detail.model.Invoice">
		/* DetailMapper.selectVendorInfo 벤더정보 조회 */
		SELECT
			A.VENDOR_ID
			, A.VENDOR_SITE_ID
		FROM EXAP_CARD_INFO_V A
		WHERE A.CARD_NUMBER = #{_parameter}
	</select>
	
	<select id="selectTermsId" parameterType="kr.co.poscoict.card.detail.model.Invoice" resultType="kr.co.poscoict.card.detail.model.Invoice">
		/* DetailMapper.selectTermsId TERMS ID 조회 */
		SELECT
			A.TERMS_ID
		FROM AP_SUPPLIER_SITES_ALL A
		WHERE A.VENDOR_ID = #{vendorId}
			AND A.VENDOR_SITE_ID = #{vendorSiteId}
	</select>
	
	<update id="updateCardApprovalList" parameterType="kr.co.poscoict.card.detail.model.Invoice">
		/* DetailMapper.updateCardApprovalList 카드승인내역 수정 */
		<selectKey keyProperty="transferId" resultType="int" order="BEFORE">
			SELECT
				EXAP_CARD_TRANSFER_S.NEXTVAL AS TRANSFER_ID
			FROM DUAL
		</selectKey>
		UPDATE EXAP_CARD_APPROVAL_LIST
		SET
			TRANSFER_ID = #{transferId}
			, VATYN_USER_CHECK = DECODE(#{hasVat}, '1', 'N', 'Y')
			, TRANSFER_SOURCE_CODE = 'F'
			, TRANSFER_FLAG = 'Y'
			, USER_CHECK_FLAG = 'Y'
			, TRANSFER_DATE = SYSDATE
			, LAST_UPDATE_DATE = SYSDATE
			, LAST_UPDATED_BY = #{user.userId}
		WHERE SEQ = #{seq}
	</update>
	
	<update id="initSessionId" statementType="CALLABLE" parameterType="int">
		/* DetailMapper.initSessionId SESSION ID 초기화 */
		{
			call FND_GLOBAL.APPS_INITIALIZE(#{_parameter}, 51269, 200, 0)
		}
	</update>
	
	<select id="selectSessionId" resultType="string">
		/* DetailMapper.selectSessionId SESSION ID 조회 */
		SELECT USERENV('SESSIONID') FROM DUAL
	</select>
	
	<select id="selectCheckGlDate" parameterType="kr.co.poscoict.card.detail.model.Invoice" resultType="int">
		/* DetailMapper.selectCheckGlDate 회계일자 검증 */
		SELECT 	COUNT(*)
		FROM 	GL_PERIOD_STATUSES
		WHERE 	APPLICATION_ID IN( 101,200) /*GL,AP*/
		AND 	LEDGER_ID = 2021 /*g_sob_id*/
		AND 	CLOSING_STATUS = 'O'
		AND 	PERIOD_YEAR = TO_NUMBER(TO_CHAR(TO_DATE(#{glDate},'YYYY-MM-DD'),'YYYY'))
		AND 	PERIOD_NUM  = TO_NUMBER(TO_CHAR(TO_DATE(#{glDate},'YYYY-MM-DD'),'MM'))
	</select>
	
	<select id="selectCheckProjectDate" parameterType="kr.co.poscoict.card.detail.model.Invoice" resultType="int">
		/* DetailMapper.selectCheckProjectDate 프로젝트 공기검증 */
		SELECT 	COUNT(*)
		FROM 	PA_PROJECTS_ALL PPA
		WHERE 	PPA.SEGMENT1 = #{projectNumber, jdbcType=VARCHAR}
		AND 	TO_DATE(#{glDate},'YYYY-MM-DD') BETWEEN PPA.START_DATE AND PPA.COMPLETION_DATE
	</select>

	<insert id="insertInvoiceHeader" parameterType="kr.co.poscoict.card.detail.model.Invoice" keyProperty="seqId,itemKey">
		/* DetailMapper.insertInvoiceHeader 전표헤더 생성 */
		<selectKey keyProperty="seqId,itemKey" resultType="kr.co.poscoict.card.detail.model.Invoice" order="BEFORE">
			SELECT
				EXAP_INVOICE_ALLOC_S.NEXTVAL AS SEQ_ID,
				'10003' || TO_CHAR(SYSDATE,'YYMMDDHH24MISS') || TRIM(TO_CHAR(EXAP_INVOICE_ALLOC_S.NEXTVAL,'00000000000')) AS ITEM_KEY
			FROM DUAL
		</selectKey>
		INSERT INTO
		EXAP_INVOICE_ALLOC_HEADER (
				SEQ_ID
	            , SESSIONID
	            , USER_ID
	            , SOURCE
	            , INVOICE_TYPE_LOOKUP_CODE
	            , GL_DATE
	            , INVOICE_DATE
	            , VENDOR_ID
	            , VENDOR_SITE_ID
	            , INVOICE_AMOUNT
	            , INVOICE_CURRENCY_CODE
	            , TERMS_ID
	            , PAYMENT_METHOD_CODE
	            , CALC_TAX_DURING_IMPORT_FLAG
	            , ADD_TAX_TO_INV_AMT_FLAG
	            , VAT_CODE
	            , DESCRIPTION
	            , TAB_TYPE
	            , SEGMENT1
	            , SEGMENT2
	            , SEGMENT3
	            , SEGMENT4
	            , SEGMENT5
	            , SEGMENT6
	            , SEGMENT7
	            , SEGMENT8
	            , ACCT_CODE_COMBINATION_ID
	            , ATTRIBUTE_CATEGORY
	            , ATTRIBUTE2
	            , ATTRIBUTE3
	            , ATTRIBUTE4
	            , GLOBAL_ATTRIBUTE1
	            , GLOBAL_ATTRIBUTE2
	            , GLOBAL_ATTRIBUTE3
	            , GLOBAL_ATTRIBUTE4
	            , GLOBAL_ATTRIBUTE5
	            , GLOBAL_ATTRIBUTE6
	            , GLOBAL_ATTRIBUTE11
	            , GLOBAL_ATTRIBUTE12
	            , CARD_TRANSFER_ID
	            , CARD_SEQ
	            , ITEM_TYPE
	            , ITEM_KEY
	            , CREATED_BY
	            , CREATION_DATE
	            , LAST_UPDATED_BY
	            , LAST_UPDATE_DATE
	            , LAST_UPDATE_LOGIN
		)
		SELECT
				#{seqId}										/* SEQ_ID */
				, #{sessionId}									/* SESSION_ID*/
				, #{user.userId}
				, 'EXPENSE'										/* SOURCE */
				, 'STANDARD'									/* INVOICE_TYPE_LOOKUP_CODE */
				, TO_DATE(#{glDate}, 'YYYY-MM-DD')
				, TO_DATE(ECAL.TRANSDATE || ' ' || ECAL.TRANSTIME, 'YYYY-MM-DD HH24:MI:SS')	/* INVOICE_DATE */
				, #{vendorId}									/* VENDOR_ID */
				, #{vendorSiteId}								/* VENDOR_SITE_ID */
				, ECAL.APPRTOT									/* INVOICE_AMOUNT */
				, ECAL.CURRCODE									/* INVOICE_CURRENCY_CODE */
				, #{termsId}									/* TERMS_ID */
				, 'CARD'										/* PAYMENT_METHOD_CODE */
				, 'N'											/* CALC_TAX_DURING_IMPORT_FLAG */
				, 'N'											/* ADD_TAX_TO_INV_AMT_FLAG */
				, DECODE(#{hasVat}, '1', '매입_카드', NULL)		/* VAT_CODE */
				, #{description}								/* DESCRIPTION */
				, 'CARD'										/* TAB_TYPE */
				, EXGL_COMMON_PKG.GET_CCID_SEGMENT(1, 5255)
				, EXGL_COMMON_PKG.GET_CCID_SEGMENT(2, 5255)
				, EXGL_COMMON_PKG.GET_CCID_SEGMENT(3, 5255)
				, EXGL_COMMON_PKG.GET_CCID_SEGMENT(4, 5255)
				, EXGL_COMMON_PKG.GET_CCID_SEGMENT(5, 5255)
				, EXGL_COMMON_PKG.GET_CCID_SEGMENT(6, 5255)
				, EXGL_COMMON_PKG.GET_CCID_SEGMENT(7, 5255)
				, EXGL_COMMON_PKG.GET_CCID_SEGMENT(8, 5255)
				, 5255  										/* ACCT_CODE_COMBINATION_ID -- 법인카드미지급금 */
				, '법인카드미지급금'  								/* ATTRIBUTE_CATEGORY */
				, ECAL.CARDNO									/* ATTRIBUTE2 -- 카드번호 */
				, ECAL.APPRNO									/* ATTRIBUTE3 -- 승인번호 */
				, SUBSTR(ECAL.MERCHBIZNO, 1, 3) || '-' || SUBSTR(ECAL.MERCHBIZNO, 4, 2) || '-' || SUBSTR(ECAL.MERCHBIZNO, 6, 5)  /* ATTRIBUTE4 -- 가맹점 사업자 등록번호 */
				, #{hasVat}										/* GLOBAL_ATTRIBUTE1 -- 세금계산서 건수(유무) */
				, ECAL.MERCHNAME								/* GLOBAL_ATTRIBUTE2 -- 거래처명 */
				, DECODE(#{hasVat}, '1', SUBSTR(ECAL.MERCHBIZNO, 1, 3) || '-' || SUBSTR(ECAL.MERCHBIZNO, 4, 2) || '-' || SUBSTR(ECAL.MERCHBIZNO, 6, 5), NULL)	/* GLOBAL_ATTRIBUTE3 -- 사업자번호 */
				, DECODE(#{hasVat}, '1', ECAL.APPRAMT1 + ECAL.TIPS1, ECAL.APPRTOT)	/* GLOBAL_ATTRIBUTE4 -- 공급가액 */
				, DECODE(#{hasVat}, '1', ECAL.vat1, 0)  		/* GLOBAL_ATTRIBUTE5 -- 부가세액 */
				, DECODE(#{hasVat}, '1', ECAL.transdate, NULL)	/* GLOBAL_ATTRIBUTE6 -- 세금계산서 일자 */
				, 'N'											/* GLOBAL_ATTRIBUTE11 -- 전자 세금계산서 신고 대상은 아니다. */ 
				, DECODE(#{hasVat}, '1','C','A')				/* GLOBAL_ATTRIBUTE12 -- C : 카드 (전자세금계산서 발행 여부), A : 대상아님 */
				, ECAL.TRANSFER_ID 								/* CARD_TRANSFER_ID */
				, ECAL.SEQ    									/* 카드테이블의 SEQ */ 
				, 'AXAP001W'  									/* ITEM_TYPE */
				, #{itemKey}
				, #{user.userId}
				, SYSDATE
				, #{user.userId}
				, SYSDATE
				, -1
		FROM EXAP_CARD_APPROVAL_LIST ECAL
		WHERE ECAL.SEQ = #{seq}
	</insert>
	
	<insert id="insertInvoiceItem" parameterType="kr.co.poscoict.card.detail.model.Invoice">
		/* DetailMapper.insertInvoiceItem 전표라인ITEM 생성 */
		INSERT INTO
		EXAP_INVOICE_ALLOC_LINE (
		    SEQ_ID
		    , SEQ_LINE_ID
		    , USER_ID
		    , LINE_TYPE_LOOKUP_CODE
		    , AMOUNT
		    , ACCOUNTING_DATE
		    , DESCRIPTION
		    , VAT_CODE
		    , PROJECT_NAME
		    , PROJECT_NUMBER
		    , PROJECT_ID
		    , TASK_NAME
		    , TASK_NUMBER
		    , TASK_ID
		    , EXPENDITURE_TYPE
		    , EXPENDITURE_ITEM_DATE
		    , EXPENDITURE_ORGANIZATION_NAME
		    , EXPENDITURE_ORGANIZATION_ID
		    , SESSIONID
		    , TAB_TYPE
		    , SEGMENT1
		    , SEGMENT2
		    , SEGMENT3
		    , SEGMENT4
		    , SEGMENT5
		    , SEGMENT6
		    , SEGMENT7
		    , SEGMENT8
		    , DIST_CODE_COMBINATION_ID
		    , ATTRIBUTE_CATEGORY
		    , ATTRIBUTE2
		    , ATTRIBUTE6
		    , CARRYING_OUT_ORGANIZATION_ID
		    , EXP_SEGMENT2
		    , PROJECT_TYPE
		) VALUES (
		    #{seqId}
		    , EXAP_INVOICE_ALLOC_S.NEXTVAL
		    , #{user.userId}
		    , 'ITEM'
		    , #{transactionAmount}
		    , TO_DATE(#{glDate}, 'YYYY-MM-DD')
		    , #{description}
		    , DECODE(#{hasVat}, '1', '매입_카드', NULL)
		    , #{projectName, jdbcType=VARCHAR}
		    , #{projectNumber, jdbcType=VARCHAR}
		    , #{projectId, jdbcType=NUMERIC}
		    , #{taskName, jdbcType=VARCHAR}
		    , #{taskNumber, jdbcType=VARCHAR}
		    , #{taskId, jdbcType=NUMERIC}
		    , #{expType, jdbcType=VARCHAR}
		    , DECODE(#{projectName, jdbcType=VARCHAR}, NULL, NULL, TO_DATE(#{glDate}, 'YYYY-MM-DD'))
		    , #{expOrgName, jdbcType=VARCHAR}
		    , #{expOrgId, jdbcType=NUMERIC}
		    , #{sessionId}
		    , 'CARD'
		    , '08'
		    , #{deptCode, jdbcType=VARCHAR}
		    , #{mainAccCode}
		    , #{subAccCode}
		    , '99'
		    , NVL(#{projectNumber, jdbcType=VARCHAR}, '00000000')
		    , '00000000'
		    , '11111111'
		    , EXGL_COMMON_PKG.GET_CCID('08', #{deptCode, jdbcType=VARCHAR}, #{mainAccCode}, #{subAccCode}, '99', NVL(#{projectNumber, jdbcType=VARCHAR}, '00000000'), '00000000', '11111111')  /* DIST_CODE_COMBINATION_ID */
		    , #{attributeCategory}  /* ATTRIBUTE_CATEGORY */
		    , #{user.hname}  		/* ATTRIBUTE2(카드소유자 이름) */
		    , #{attend}
		    , #{expOrgId, jdbcType=NUMERIC}
		    , #{deptCode, jdbcType=VARCHAR}
		    , #{projectType, jdbcType=VARCHAR}
		)
	</insert>
	
	<insert id="insertInvoiceTax" parameterType="kr.co.poscoict.card.detail.model.Invoice">
		/* DetailMapper.insertInvoiceTax 전표TAX 생성 */
		<selectKey keyProperty="vat1" resultType="long" order="BEFORE">
			SELECT
				VAT1
			FROM EXAP_CARD_APPROVAL_LIST
			WHERE SEQ = #{seq}
		</selectKey>
		INSERT INTO
		EXAP_INVOICE_ALLOC_LINE (
	        SEQ_ID
	        , SEQ_LINE_ID
	        , USER_ID
	        , LINE_TYPE_LOOKUP_CODE
	        , AMOUNT
	        , ACCOUNTING_DATE
	        , DESCRIPTION
	        , TAX_RATE_CODE
	        , SESSIONID
	        , TAB_TYPE
	        , SEGMENT1
	        , SEGMENT2
	        , SEGMENT3
	        , SEGMENT4
	        , SEGMENT5
	        , SEGMENT6
	        , SEGMENT7
	        , SEGMENT8
	        , DIST_CODE_COMBINATION_ID
	        , ATTRIBUTE_CATEGORY
		)
		SELECT
	        #{seqId}
	        , EXAP_INVOICE_ALLOC_S.NEXTVAL
	        , #{user.userId}
	        , 'TAX'
	        , #{vat1}
	        , TO_DATE(#{glDate}, 'YYYY-MM-DD')
	        , '매입_카드'
	        , '매입_카드'
	        , #{sessionId}
	        , 'CARD'
	        , GCC.SEGMENT1
	        , GCC.SEGMENT2
	        , GCC.SEGMENT3
	        , GCC.SEGMENT4
	        , GCC.SEGMENT5
	        , GCC.SEGMENT6
	        , GCC.SEGMENT7
	        , GCC.SEGMENT8
	        , GCC.CODE_COMBINATION_ID
	        , EXGL_COMMON_PKG.GET_AP_CONTEXT_LINE(GCC.SEGMENT3) 
		FROM   ZX_RATES_B 				ZRB
			JOIN ZX_ACCOUNTS			ZAC ON ZRB.TAX_RATE_ID = ZAC.TAX_ACCOUNT_ENTITY_ID
		    JOIN GL_CODE_COMBINATIONS	GCC ON ZAC.TAX_ACCOUNT_CCID = GCC.CODE_COMBINATION_ID
		WHERE  ZRB.TAX_RATE_CODE = '매입_카드'
	</insert>
	
	<select id="selectWorkflowId" resultType="long">
		/* DetailMapper.selectWorkflowId WORKFLOW ID 조회 */
		SELECT AXAP_APPR_ID_S.NEXTVAL FROM DUAL
	</select>
	
	<insert id="callInsertApprovalHead" statementType="CALLABLE" parameterType="kr.co.poscoict.card.detail.model.Invoice">
		/* DetailMapper.callInsertApprovalHead 승인권자 헤더 등록 */
		{
			call AXAP_APPROVE_PKG.INSERT_APPROVAL_HEAD
			(
						#{wfId}
					    , 'AXAP001W'
					    , #{itemKey}
					    , '10003'
					    , '법인카드 전표 승인요청'
					    , #{description}
					    , '-'
					    , SYSDATE
					    , #{user.empId}
					    , 0
					    , 1
			)
		}
	</insert>
	
	<insert id="callInsertApprovalLine" statementType="CALLABLE" parameterType="kr.co.poscoict.card.detail.model.Invoice">
		/* DetailMapper.callInsertApprovalLine 승인권자 라인 등록 */
		{
			call AXAP_APPROVE_PKG.INSERT_APPROVAL_LINE
			(
						#{wfId}
						, #{itemKey}
						, '법인카드 전표 승인요청'
						, #{description}
						, '-'
						, #{apprLevel}
						, #{apprLevelCnt}
						, #{empId}
						, #{supervisorId}
						, NULL
			)
		}
	</insert>
	
	<insert id="insertApprovalHead" parameterType="kr.co.poscoict.card.detail.model.Invoice">
		/* DetailMapper.insertApprovalHead 승인권자 헤더 등록 */
		INSERT INTO 
		AXAP_APPROVAL_HEAD
			(WF_ID
			,ITEM_TYPE
			,ITEM_KEY
			,REQUEST_NAME
			,REQUEST_DESC
			,REQUEST_NO
			,START_DATE
			,APP1_ID
			,APP2_ID
			,APPR_STEP
			,CREATED_BY
			,CREATION_DATE
			,LAST_UPDATED_BY
			,LAST_UPDATE_DATE
			,LAST_UPDATE_LOGIN
			,REQUEST_TYPE
			,REQUEST_TYPE_NAME
			)
		VALUES
			(#{wfId}
			,'AXAP001W'
			,#{itemKey}
			,'법인카드 전표 승인요청'
			,substrb(#{description},1,255)
			,'-'
			,SYSDATE
			,#{user.empId}
			,0
			,1
			,#{user.userId}
			,SYSDATE
			,#{user.userId}
			,SYSDATE
			,-1
			,'10003'
			,(SELECT T.MEANING 
				FROM   FND_LOOKUP_VALUES T
				WHERE  T.LOOKUP_TYPE = 'AXAP_REQUEST_TYPE' 
				AND    T.LOOKUP_CODE = '10003')
			)
				
	</insert>
	
	<insert id="insertApprovalLine" parameterType="kr.co.poscoict.card.detail.model.Invoice">
		/* DetailMapper.insertApprovalLine 승인권자 라인 등록 */
		INSERT INTO   
		AXAP_APPROVAL_LINE
			(WF_ID
			,ITEM_KEY
			,REQUEST_NAME
			,REQUEST_DESC
			,REQUEST_NO
			,LINE_ID
			,STEP_NO
			,EMP_ID
			,SUPERVISIOR_ID
			,STATUS
			,CREATED_BY
			,CREATION_DATE
			,LAST_UPDATED_BY
			,LAST_UPDATE_DATE
			,LAST_UPDATE_LOGIN
			)
		VALUES
			(#{wfId}
			,#{itemKey}
			,'법인카드 전표 승인요청'
			,substrb(#{description},1,255)
			,'-'
			,#{apprLevel}
			,#{apprLevelCnt}
			,#{empId}
			,#{supervisorId}
			,NULL
			,#{user.empId}
			,SYSDATE
			,#{user.empId}
			,SYSDATE
			,-1
			)
	</insert>
	
	<insert id="callErpApprove" statementType="CALLABLE" parameterType="kr.co.poscoict.card.detail.model.Invoice">
		/* DetailMapper.callErpApprove 승인 요청 */
		{
			call BXAP_MOBILE_PKG.ERP_IF_CALL
			(
						#{seqId}
			    		, #{user.userId}
			)
		}
	</insert>
	
	<insert id="insertDocuFile" parameterType="kr.co.poscoict.card.detail.model.Invoice">
		/* DetailMapper.insertDocuFile 첨부파일 등록 */
		INSERT INTO 
		BXAP_APPROVE_ATTACH(
			ITEM_KEY,
			SOURCE,
			MAIN_TYPE,
			SUB_TYPE,
			INVOICE_ID,
			FILE_ID,
			FILE_NAME,
			CREATED_BY,
			CREATION_DATE
		)
		VALUES (
			#{itemKey},
			'DOC',
			'AP',
			'CRD',
			#{seqId},
			'MBL'|| replace( #{fileId} ,'|','|MBL') || '|', 
			#{fileNm} || '|',
			#{user.userId},
			SYSDATE
		)
	</insert>
	
</mapper>